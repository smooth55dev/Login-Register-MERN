{"ast":null,"code":"import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post(\"/api/authenticate\", {\n      username\n    });\n  } catch (error) {\n    return {\n      error: \"Username doesn't exist...!\"\n    };\n  }\n}\n\n/** get User details */\nexport async function getUser(_ref) {\n  let {\n    username\n  } = _ref;\n  try {\n    const {\n      data\n    } = await axios.get(`/api/user/${username}`);\n    return {\n      data\n    };\n  } catch (error) {\n    return {\n      error: \"Password doesn't Match...!\"\n    };\n  }\n}\n\n/** register user function */\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: {\n        msg\n      },\n      status\n    } = await axios.post(`/api/register`, credentials);\n    let {\n      username,\n      email\n    } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post(\"/api/registerMail\", {\n        username,\n        userEmail: email,\n        text: msg\n      });\n    }\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** login function */\nexport async function verifyPassword(_ref2) {\n  let {\n    username,\n    password\n  } = _ref2;\n  try {\n    if (username) {\n      const {\n        data\n      } = await axios.post(\"/api/login\", {\n        username,\n        password\n      });\n      return Promise.resolve({\n        data\n      });\n    }\n  } catch (error) {\n    return Promise.reject({\n      error: \"Password doesn't Match...!\"\n    });\n  }\n}\n\n/** update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem(\"token\");\n    const data = await axios.put(\"/api/updateuser\", response, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return Promise.resolve({\n      data\n    });\n  } catch (error) {\n    return Promise.reject({\n      error: \"Couldn't Update Profile...!\"\n    });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: {\n        code\n      },\n      status\n    } = await axios.get(\"/api/generateOTP\", {\n      params: {\n        username\n      }\n    });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: {\n          email\n        }\n      } = await getUser({\n        username\n      });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post(\"/api/registerMail\", {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\"\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}\n\n/** verify OTP */\nexport async function verifyOTP(_ref3) {\n  let {\n    username,\n    code\n  } = _ref3;\n  try {\n    const {\n      data,\n      status\n    } = await axios.get(\"/api/verifyOTP\", {\n      params: {\n        username,\n        code\n      }\n    });\n    return {\n      data,\n      status\n    };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword(_ref4) {\n  let {\n    username,\n    password\n  } = _ref4;\n  try {\n    const {\n      data,\n      status\n    } = await axios.put(\"/api/resetPassword\", {\n      username,\n      password\n    });\n    return Promise.resolve({\n      data,\n      status\n    });\n  } catch (error) {\n    return Promise.reject({\n      error\n    });\n  }\n}","map":{"version":3,"names":["axios","jwt_decode","defaults","baseURL","process","env","REACT_APP_API_URL","getUsername","token","localStorage","getItem","Promise","reject","decode","authenticate","username","post","error","getUser","_ref","data","get","registerUser","credentials","msg","status","email","userEmail","text","resolve","verifyPassword","_ref2","password","updateUser","response","put","headers","Authorization","generateOTP","code","params","subject","verifyOTP","_ref3","resetPassword","_ref4"],"sources":["D:/work/Yamada/Login-Register-MERN/frontend/src/helper/helper.js"],"sourcesContent":["import axios from \"axios\";\nimport jwt_decode from \"jwt-decode\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n/** To get username from Token */\nexport async function getUsername() {\n  const token = localStorage.getItem(\"token\");\n  if (!token) return Promise.reject(\"Cannot find Token\");\n  let decode = jwt_decode(token);\n  return decode;\n}\n\n/** authenticate function */\nexport async function authenticate(username) {\n  try {\n    return await axios.post(\"/api/authenticate\", { username });\n  } catch (error) {\n    return { error: \"Username doesn't exist...!\" };\n  }\n}\n\n/** get User details */\nexport async function getUser({ username }) {\n  try {\n    const { data } = await axios.get(`/api/user/${username}`);\n    return { data };\n  } catch (error) {\n    return { error: \"Password doesn't Match...!\" };\n  }\n}\n\n/** register user function */\nexport async function registerUser(credentials) {\n  try {\n    const {\n      data: { msg },\n      status,\n    } = await axios.post(`/api/register`, credentials);\n\n    let { username, email } = credentials;\n\n    /** send email */\n    if (status === 201) {\n      await axios.post(\"/api/registerMail\", {\n        username,\n        userEmail: email,\n        text: msg,\n      });\n    }\n\n    return Promise.resolve(msg);\n  } catch (error) {\n    return Promise.reject({ error });\n  }\n}\n\n/** login function */\nexport async function verifyPassword({ username, password }) {\n  try {\n    if (username) {\n      const { data } = await axios.post(\"/api/login\", { username, password });\n      return Promise.resolve({ data });\n    }\n  } catch (error) {\n    return Promise.reject({ error: \"Password doesn't Match...!\" });\n  }\n}\n\n/** update user profile function */\nexport async function updateUser(response) {\n  try {\n    const token = await localStorage.getItem(\"token\");\n    const data = await axios.put(\"/api/updateuser\", response, {\n      headers: { Authorization: `Bearer ${token}` },\n    });\n\n    return Promise.resolve({ data });\n  } catch (error) {\n    return Promise.reject({ error: \"Couldn't Update Profile...!\" });\n  }\n}\n\n/** generate OTP */\nexport async function generateOTP(username) {\n  try {\n    const {\n      data: { code },\n      status,\n    } = await axios.get(\"/api/generateOTP\", { params: { username } });\n\n    // send mail with the OTP\n    if (status === 201) {\n      let {\n        data: { email },\n      } = await getUser({ username });\n      let text = `Your Password Recovery OTP is ${code}. Verify and recover your password.`;\n      await axios.post(\"/api/registerMail\", {\n        username,\n        userEmail: email,\n        text,\n        subject: \"Password Recovery OTP\",\n      });\n    }\n    return Promise.resolve(code);\n  } catch (error) {\n    return Promise.reject({ error });\n  }\n}\n\n/** verify OTP */\nexport async function verifyOTP({ username, code }) {\n  try {\n    const { data, status } = await axios.get(\"/api/verifyOTP\", {\n      params: { username, code },\n    });\n    return { data, status };\n  } catch (error) {\n    return Promise.reject(error);\n  }\n}\n\n/** reset password */\nexport async function resetPassword({ username, password }) {\n  try {\n    const { data, status } = await axios.put(\"/api/resetPassword\", {\n      username,\n      password,\n    });\n    return Promise.resolve({ data, status });\n  } catch (error) {\n    return Promise.reject({ error });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}