{"ast":null,"code":"import toast from \"react-hot-toast\";\nimport { authenticate } from \"./helper\";\n\n// validate login page username\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    // check user exist or not\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status !== 200) {\n      errors.exist = toast.error(\"User does not exist...!\");\n    }\n  }\n  return errors;\n}\n\n// validate password\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** validate reset password */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Password not match...!\");\n  }\n  return errors;\n}\n\n/** validate register form */\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n// validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error(\"Username Required...!\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid Username\");\n  }\n  return error;\n}\n\n// validate password\nfunction passwordVerify(errors = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 characters long\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must have special character\");\n  }\n  return errors;\n}\n\n/** validate email */\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","errors","usernameVerify","username","status","exist","error","passwordValidate","passwordVerify","resetPasswordValidation","password","confirm_pwd","registerValidation","emailVerify","profileValidation","includes","specialChars","length","test","email"],"sources":["D:/work/Yamada/Login-MERN-/frontend/src/helper/validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\nimport { authenticate } from \"./helper\";\n\n// validate login page username\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n\n  if (values.username) {\n    // check user exist or not\n    const { status } = await authenticate(values.username);\n\n    if (status !== 200) {\n      errors.exist = toast.error(\"User does not exist...!\");\n    }\n  }\n\n  return errors;\n}\n\n// validate password\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** validate reset password */\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n\n  if (values.password !== values.confirm_pwd) {\n    errors.exist = toast.error(\"Password not match...!\");\n  }\n\n  return errors;\n}\n\n/** validate register form */\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n\n  return errors;\n}\n\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}\n\n// validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error(\"Username Required...!\");\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid Username\");\n  }\n\n  return error;\n}\n\n// validate password\nfunction passwordVerify(errors = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\n      \"Password must be more than 4 characters long\"\n    );\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must have special character\");\n  }\n\n  return errors;\n}\n\n/** validate email */\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"Email Required...!\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"Wrong Email...!\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n\n  return error;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}